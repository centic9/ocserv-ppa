#!/bin/bash
#
# Copyright (C) 2018 Nikos Mavrogiannopoulos
#
# This file is part of ocserv.
#
# ocserv is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# ocserv is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This tests operation/traffic under compression (lzs or lz4).

OCCTL="${OCCTL:-../src/occtl/occtl}"
SERV="${SERV:-../src/ocserv}"
srcdir=${srcdir:-.}
PORT=4569
PIDFILE=ocserv-pid.$$.tmp
CLIPID=oc-pid.$$.tmp
PATH=${PATH}:/usr/sbin
IP=$(which ip)
OUTFILE=traffic.$$.tmp
RADIUSLOG=log.$$.tmp
RADIUSD=$(which radiusd)

if test -z "${RADIUSD}";then
	RADIUSD=$(which freeradius)
fi 

. `dirname $0`/common.sh

if test -z "${IP}";then
	echo "no IP tool is present"
	exit 77
fi

if test -z "${RADIUSD}";then
	echo "no radiusd is present"
	exit 77
fi

if test "$(id -u)" != "0";then
	echo "This test must be run as root"
	exit 77
fi

echo "Testing ocserv and radius... "

function finish {
  set +e
  echo " * Cleaning up..."
  test -n "${PID}" && kill ${PID} >/dev/null 2>&1
  test -n "${RADIUSPID}" && kill ${RADIUSPID} >/dev/null 2>&1
  test -n "${PIDFILE}" && rm -f ${PIDFILE} >/dev/null 2>&1
  test -f "${CLIPID}" && kill $(cat ${CLIPID}) >/dev/null 2>&1
  test -n "${CLIPID}" && rm -f ${CLIPID} >/dev/null 2>&1
  test -n "${CONFIG}" && rm -f ${CONFIG} >/dev/null 2>&1
  test -n "${RADIUSLOG}" && rm -f ${RADIUSLOG} >/dev/null 2>&1
  rm -f ${OUTFILE} 2>&1
}
trap finish EXIT

# server address
ADDRESS=10.173.78.1
CLI_ADDRESS=10.173.79.1

# These must match the data/raddb/users:test-class user
VPNNET=192.168.93.0/24
VPNADDR=192.168.93.1
VPNNET6=fc7d:b139:f7ba:5f53:c634:e98e:b777:0/112
VPNADDR6=fc7d:b139:f7ba:5f53:c634:e98e:b777:1
OCCTL_SOCKET=./occtl-radius-group-$$.socket

. `dirname $0`/ns.sh

${CMDNS2} ${IP} link set dev lo up

# Run servers
${CMDNS2} ${RADIUSD} -d ${srcdir}/data/raddb/ -s -x -l ${RADIUSLOG} &
RADIUSPID=$!

update_config radius-group.config
if test "$VERBOSE" = 1;then
DEBUG="-d 3"
fi

${CMDNS2} ${SERV} -p ${PIDFILE} -f -c ${CONFIG} ${DEBUG} & PID=$!

sleep 4


echo " * Tests the radius group functionality"
USERNAME=test-class
( echo "${USERNAME}" | ${CMDNS1} ${OPENCONNECT} ${ADDRESS}:${PORT} --authgroup group2 -u ${USERNAME} --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 -s ${srcdir}/scripts/vpnc-script --pid-file=${CLIPID} --passwd-on-stdin -b )
if test $? != 0;then
	echo "Could not connect to server"
	exit 1
fi

sleep 3

${CMDNS1} ${IP} addr show|grep $(echo ${VPNADDR}|cut -d '.' -f 1-3)
if test $? != 0;then
	${CMDNS1} ${IP} addr show
	echo "Did not find expected IP in VPN"
	exit 1
fi

${CMDNS1} ping -w 3 ${VPNADDR}
if test $? != 0;then
	echo "Could not ping server VPN IP"
	exit 1
fi

MATCH="Groupname: group2"
${OCCTL} -s ${OCCTL_SOCKET} show user ${USERNAME} >${OUTFILE} 2>&1
grep "${MATCH}" ${OUTFILE}
if test $? != 0;then
	${OCCTL} -s ${OCCTL_SOCKET} show user ${USERNAME}
	echo "could not find group information"
	exit 1
fi

test -f "${CLIPID}" && kill $(cat ${CLIPID}) >/dev/null 2>&1
test -n "${CLIPID}" && rm -f ${CLIPID} >/dev/null 2>&1

sleep 4

echo " * Tests the alt radius group functionality"
USERNAME=test-class
( echo "${USERNAME}" | ${CMDNS1} ${OPENCONNECT} ${ADDRESS}:${PORT} --authgroup group1 -u ${USERNAME} --servercert=d66b507ae074d03b02eafca40d35f87dd81049d3 -s ${srcdir}/scripts/vpnc-script --pid-file=${CLIPID} --passwd-on-stdin -b )
if test $? != 0;then
	echo "Could not connect to server"
	exit 1
fi

sleep 3

${CMDNS1} ${IP} addr show|grep $(echo ${VPNADDR}|cut -d '.' -f 1-3)
if test $? != 0;then
	${CMDNS1} ${IP} addr show
	echo "Did not find expected IP in VPN"
	exit 1
fi

MATCH="Groupname: group1"
${OCCTL} -s ${OCCTL_SOCKET} show user ${USERNAME} >${OUTFILE} 2>&1
grep "${MATCH}" ${OUTFILE}
if test $? != 0;then
	${OCCTL} -s ${OCCTL_SOCKET} show user ${USERNAME}
	echo "could not find group information"
	exit 1
fi

exit 0
